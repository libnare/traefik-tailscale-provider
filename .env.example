# =============================================================================
# Traefik Tailscale Provider - Environment Variables
# =============================================================================

# -----------------------------------------------------------------------------
# TAILSCALE CONNECTION
# -----------------------------------------------------------------------------
# Custom Tailscale socket path (optional)
# Default: auto-detected based on OS
# TAILSCALE_SOCKET_PATH=/var/run/tailscale/tailscaled.sock

# -----------------------------------------------------------------------------
# SERVER CONFIGURATION
# -----------------------------------------------------------------------------
# HTTP server port for serving dynamic configuration to Traefik
SERVER_PORT=8080

# Update interval in seconds (how often to refresh Tailscale peer list)
UPDATE_INTERVAL_SECONDS=30

# -----------------------------------------------------------------------------
# SERVICE DISCOVERY & FILTERING
# -----------------------------------------------------------------------------
# Only include peers with these tags (comma-separated)
# If not set, includes all online peers
INCLUDE_TAGS=web,api,db,cache,dns

# Exclude peers with these hostnames (comma-separated)
# EXCLUDE_HOSTNAMES=test-server,old-server

# Only include peers with these OS types (comma-separated)
# INCLUDE_OS=linux,darwin

# Exclude peers with expired node keys
EXCLUDE_EXPIRED=true

# Exclude exit nodes from configuration
EXCLUDE_EXIT_NODES=true

# Only include peers that have been active within this many seconds
# MAX_INACTIVE_SECONDS=3600

# -----------------------------------------------------------------------------
# TAG PARSING & PROTOCOL DETECTION
# -----------------------------------------------------------------------------
# Extract port and protocol from tag format "service-port-protocol"
# Examples: "web-3000-https", "db-5432-tcp", "dns-53-udp"
EXTRACT_PROTOCOL_FROM_TAG=true

# Manual tag to service mapping (comma-separated)
# Format: "tag:port:protocol,tag2:port2:protocol2"
# This overrides tag parsing for specific services
# TAG_SERVICE_MAPPING=legacy:8000:http,cache:6379:tcp

# -----------------------------------------------------------------------------
# DNS & ROUTING
# -----------------------------------------------------------------------------
# Default Host rule: HostRegexp(`.*`) - accepts all requests
# Use SERVICE_DOMAIN_MAPPING for specific domain routing

# Service to domain mapping (comma-separated)
# Format: "service:domain,service2:domain2"
# Maps service names to custom domains for HTTP routing
# SERVICE_DOMAIN_MAPPING=web:app.example.net,api:api.example.net

# -----------------------------------------------------------------------------
# DEFAULT VALUES
# -----------------------------------------------------------------------------
# Default port when not specified in tag or mapping
DEFAULT_PORT=80

# Default protocol when not specified (http, tcp, udp)
DEFAULT_PROTOCOL=http

# Default scheme for HTTP services (http, https)
DEFAULT_SCHEME=http

# -----------------------------------------------------------------------------
# HEALTH CHECKS
# -----------------------------------------------------------------------------
# Health check path for HTTP services (optional)
# If set, enables health checks for all HTTP services
HEALTH_CHECK_PATH=/health

# =============================================================================
# USAGE EXAMPLES
# =============================================================================

# Example 1: Simple HTTP services only
# INCLUDE_TAGS=web
# DEFAULT_PORT=3000
# Tailscale tags: "web" → http://peer-ip:3000

# Example 2: Mixed protocols with port extraction
# INCLUDE_TAGS=web,api,db
# EXTRACT_PROTOCOL_FROM_TAG=true
# Tailscale tags:
#   "web-3000-https" → https://peer-ip:3000 (HTTP service)
#   "api-8080-http"  → http://peer-ip:8080  (HTTP service)
#   "db-5432-tcp"    → peer-ip:5432        (TCP service)

# Example 3: UDP services
# INCLUDE_TAGS=dns,syslog
# Tailscale tags:
#   "dns-53-udp"     → peer-ip:53          (UDP service)
#   "syslog-514-udp" → peer-ip:514         (UDP service)

# Example 4: Manual mapping for legacy services
# INCLUDE_TAGS=legacy,old-api
# TAG_SERVICE_MAPPING=legacy:8000:http,old-api:9090:https
# Tailscale tags:
#   "legacy" → http://peer-ip:8000
#   "old-api" → https://peer-ip:9090

# Example 5: Custom domains for services
# INCLUDE_TAGS=web,api
# SERVICE_DOMAIN_MAPPING=web:app.example.net,api:api.example.net
# EXTRACT_PROTOCOL_FROM_TAG=true
# Tailscale tags:
#   "web-3000-https" → https://peer-ip:3000 with Host(`app.example.net`)
#   "api-8080-http" → http://peer-ip:8080 with Host(`api.example.net`)

# Example 5: All online peers (no filtering)
# # No INCLUDE_TAGS set - includes all online peers
# DEFAULT_PORT=80
# DEFAULT_PROTOCOL=http

# =============================================================================
# TAG FORMAT REFERENCE
# =============================================================================
#
# Supported tag formats:
# - "service"              → service:DEFAULT_PORT:DEFAULT_PROTOCOL
# - "service-3000"         → service:3000:DEFAULT_PROTOCOL  
# - "service-3000-http"    → service:3000:http
# - "service-3000-https"   → service:3000:https
# - "service-3000-tcp"     → service:3000:tcp
# - "service-3000-udp"     → service:3000:udp
# - "my-web-app-3000-tcp"  → my-web-app:3000:tcp (complex names)
#
# Generated Traefik names:
# - Service: "tailscale-{hostname}-{service}"
# - Router:  "tailscale-{hostname}-{service}-router"
#
# =============================================================================